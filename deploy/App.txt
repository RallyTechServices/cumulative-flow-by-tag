<!DOCTYPE html>
<html>
<head>
    <title>Cumulative Flow by Tags</title>
    <!--  (c) 2014 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Wed Dec 03 2014 11:54:18 GMT-0700 (MST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Wed Dec 03 2014 11:54:18 GMT-0700 (MST)";
        var CHECKSUM = 8557832954;
    </script>
    
    <script type="text/javascript" src="/apps/2.0rc3/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
Ext.define("CumulativeFlowCalculator", {
     extend: "Rally.data.lookback.calculator.TimeSeriesCalculator",
     config: {
         stateFieldName: 'ScheduleState',
         stateFieldValues: ['Defined', 'In-Progress', 'Completed', 'Accepted', 'Finished'],
         totalPoints: 0
     },
     InProgressName: 'In-Progress',
     AcceptedName: 'Accepted',
     runCalculation: function (snapshots) {
         var calculatorConfig = this._prepareCalculatorConfig(),
             seriesConfig = this._buildSeriesConfig(calculatorConfig);

         var calculator = this.prepareCalculator(calculatorConfig);
         calculator.addSnapshots(snapshots, this._getStartDate(snapshots), this._getEndDate(snapshots));
         
         var calcs = this._transformLumenizeDataToHighchartsSeries(calculator, seriesConfig);

         //get planned start date
         var actual_series = this._getActualSeries(calcs);
         calcs.series.push(actual_series);
        
         var ideal_series = this._getIdealSeries(calcs);
         calcs.series.push(ideal_series);
         
         //Format the categories by week 
         var new_categories = _.map(calcs.categories, function(c){
             var week = Rally.util.DateTime.format(new Date(c), 'W');
             var year = Rally.util.DateTime.format(new Date(c),'Y');
             return year.toString() + 'WW' + week.toString(); 
         });
         calcs.categories = new_categories;
         return calcs;
     },
     getPercentCompleted: function(){
         if (this.getTotalPoints() > 0){
             return Ext.String.format("{0} % of total points completed", (this.actualPoints / this.getTotalPoints() * 100).toFixed(1));
         }
         return 'No total points to calculate % Completed';
     },
     _getIdealSeries: function(calcs){
         var data = [];
         var endDate = new Date(this.getEndDate());
         var startDate = new Date(this.getStartDate());
         var totalPoints = Number(this.getTotalPoints());
         var num_velocity_periods = Rally.util.DateTime.getDifference(endDate, startDate,'week')/2;
         var velocity = 0;
         var data = [];
         var startDatei = 0;
         console.log(startDate, endDate, calcs);
         var endDatei = calcs.categories.length-1;  
         
         for(var i=0; i< calcs.categories.length; i++){
            var d = new Date(calcs.categories[i]);
            data[i] = null; 
            if (d.getYear() == startDate.getYear() && 
                 d.getMonth() == startDate.getMonth() && 
                 d.getDate() == startDate.getDate()){
                startDatei = i;
            }
            if (d.getYear() == endDate.getYear() && 
                    d.getMonth() == endDate.getMonth() && 
                    d.getDate() == endDate.getDate()){
                endDatei = i;   
               }
         };
         velocity = Math.round(totalPoints/num_velocity_periods);  
         data[startDatei] = 0;
         data[endDatei] = totalPoints;
         var series = {
                 name: Ext.String.format('Ideal (velocity: {0})',velocity),
                 type: 'line',
                 data: data,
                 color: '',
                 dashStyle: 'Solid',
                 stack: 'ideal'
         };
         console.log('idealseries',series);
         return series;
     },
     _getActualSeries: function(calcs){

         var data = []; 
         var num_velocity_periods = Rally.util.DateTime.getDifference(new Date(calcs.categories[calcs.categories.length-1]), new Date(calcs.categories[0]),'week')/2;
         var velocity = 0;
         var firstInProgressi = 0;
         var states = this.getStateFieldValues(); 
         var firstInState = [];
         for (var i=0; i<states.length; i++){
             firstInState[i] = -1;
         }
         this.actualPoints = 0 ;
         var actual_end_index = 0; 
         var currentDate = new Date();
         for(var i=0; i< calcs.categories.length; i++){
             var d = new Date(calcs.categories[i]);
             data[i] = null; 
             if (d.getYear() >= currentDate.getYear() && 
                  d.getMonth() >= currentDate.getMonth() && 
                  d.getDate() >= currentDate.getDate()){
                 actual_end_index = i;
             }
          };
          if (actual_end_index == 0){
              actual_end_index = calcs.categories.length-1;
          }

         
         Ext.each(calcs.series, function(s){
             console.log(s.name);
             var idx = Ext.Array.indexOf(states, s.name, 0);
             if (idx >= 0 && firstInState[idx] <0){
                 for (var i=0; i<s.data.length; i++){
                     if (s.data[i] > 0){
                         firstInState[idx] = i;
                         i = s.data.length; 
                     }
                 }
             }
             if (s.name == this.AcceptedName){
//                 _.range(s.data.length).map(function () { return null });
                 for (var i=0; i<s.data.length; i++){
                     data[i] = null;
                 }
                 this.actualPoints = s.data[actual_end_index];
             }
         }, this);
         

         //Get the date of first inprogress.  If that doesn't work, then get the first date of the next state
         var actual_start_index = 0;  
         var idx = Ext.Array.indexOf(states, this.InProgressName, 0);
         for (var j=idx; j<firstInState.length; j++){
             if (firstInState[j] >= 0){
                 actual_start_index = firstInState[j];
                 j = firstInState.length; 
             }
         }
         
         data[actual_start_index] = 0;
         data[actual_end_index] = this.actualPoints; 
         velocity = Math.round(this.actualPoints/num_velocity_periods);  
         
         var series = {
                 name: Ext.String.format('Actual (velocity: {0})',velocity),
                 type: 'line',
                 data: data,
                 color: '',
                 dashStyle: 'Solid',
                 stack: 'actual'
         };
         console.log(series);
         return series;
     },
     constructor: function(config) {
         this.initConfig(config);
         this.callParent(arguments);
     },
     getMetrics: function() {
         var metrics = [];
         Ext.each(this.getStateFieldValues(), function(stateFieldValue){
             metrics.push({
                 field: 'PlanEstimate',
                 as: stateFieldValue,
                 f: 'filteredSum',
                 filterField: this.getStateFieldName(),
                 filterValues: [stateFieldValue],
                 display: 'area'
             });  
         }, this);
         
         metrics.push({
             field: 'PlanEstimate',
             as: 'TotalPoints',
             f: 'sum',
             display: 'line'
         })
         return metrics; 
         
     },
     getDerivedFieldsOnInput: function(){
         return [];
     },
     getDerivedFieldsAfterSummary: function(){
         return [];
     }


 });
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CustomApp', {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    items: [
        {xtype:'container',itemId:'master_control_box', layout: {type: 'hbox'}, items: [
                 {xtype:'container',itemId:'control_box',layout: {type:'vbox'}, flex: 1},
                 {xtype:'container',itemId:'summary_box',layout: {type:'vbox'}, 
                     flex: 1, margin: 50, padding: 10, 
                     tpl: '{0} % of Total Points Completed',
                     emptyText: ''},
                 {xtype:'container',itemId:'litter_box',layout: {type:'vbox'}, flex: 1}
         ]},
        {xtype:'container',itemId:'display_box'},
        {xtype:'tsinfolink'}
    ],
    selectedPortfolioItemIds: [],
    portfolioItemTypes: ['PortfolioItem/Feature','PortfolioItem/Initiative','PortfolioItem/Theme'],
    portfolioItemStateDone: 'Done',
    launch: function() {
        Ext.create('CumulativeFlowCalculator',{});
        var min_dropdown_width = 300; 
        var label_width = 100;
        this.down('#control_box').add({
            xtype: 'rallytagpicker',
            itemId: 'tag-picker',
            alwaysExpanded: false,
            minWidth: min_dropdown_width,
            fieldLabel: 'Tags',
            labelWidth: label_width,
            labelAlign: 'right',
            padding: 10
        });
        
        
        this.down('#control_box').add({
            xtype: 'container',
            itemId: 'control_hbox',
            layout: {type: 'hbox'},
            padding: 5,
            items: [{
                xtype: 'rallytextfield',
                itemId: 'selected-portfolio-item',
                width: min_dropdown_width,
                emptyText: 'Select Portfolio Item',
                readOnly: true,
                fieldLabel: 'Portfolio Item',
                labelWidth: 100,
                margin: '0 10 0 10',
                labelAlign: 'right'
            },{ xtype: 'rallybutton',
                text: 'Select...',
                scope: this,
                margin: '0 10 0 10',
                handler: this._selectPortfolioItems
                }]
           
        });
        
        this.down('#summary_box').add({
            xtype: 'rallytextfield',
            itemId: 'summary-text',
            width: 350
        });
        this.down('#control_box').add({
            xtype: 'rallybutton',
            text: 'Run',
            margin: '10 10 10 115',
            scope: this,
            handler: this._run
        });
        
    },
    _selectPortfolioItems: function(){
        
        Ext.create('Rally.ui.dialog.SolrArtifactChooserDialog', {
            artifactTypes: ['portfolioitem'],
            autoShow: true,
            height: 250,
            title: 'Choose Portfolio Items',
            listeners: {
                artifactchosen: function(ac, selectedRecord){
                    this.selectedPortfolioItemIds = [selectedRecord.get('ObjectID')];
                    this.down('#selected-portfolio-item').setValue(selectedRecord.get('FormattedID') + ':' + selectedRecord.get('Name'));
                },
                scope: this
            }
         });
    },
    _run: function(){
        this.logger.log('_run');
        var tags = this._getTagObjectIDs();  

        this._getAssociatedPortfolioItems(tags, this.selectedPortfolioItemIds).then({
            scope:this,
            success: function(data){
                this.logger.log('_run Success', data);
                this._createChart(data[0], data[1],data[2],data[3]);
            },
            failure: function(error, success){
                alert(error);
            }
        });
    },
    _createChart: function(portfolioItemIds, totalPoints, startDate, endDate){
        this.logger.log('_createChart',portfolioItemIds, totalPoints, startDate, endDate);
        this.down('#display_box').add({
            xtype: 'rallychart',
            itemId: 'rally-chart',
            calculatorType: 'CumulativeFlowCalculator',
            storeType: 'Rally.data.lookback.SnapshotStore',
            storeConfig: this._getStoreConfig(portfolioItemIds),
            calculatorConfig: {
                stateFieldName: 'ScheduleState',
                stateFieldValues: ['Defined','In-Progress','Completed','Accepted'],
                totalPoints: totalPoints,
                startDate: startDate,
                endDate: endDate
            },
            chartConfig: this._getChartConfig(),
            listeners: {
                scope: this,
                chartRendered: this._updateSummary
            }
        });    
    },
    _updateSummary: function(chart){
        console.log('summary',chart.calculator,chart.calculator.getPercentCompleted());
        this.down('#summary-text').setValue(chart.calculator.getPercentCompleted());
    },
    _getChartConfig: function(){
        return {
            chart: {
                zoomType: 'xy'
            },
            title: {
                text: 'Cumulative Flow by Tags'
            },
            xAxis: {
                tickmarkPlacement: 'on',
                tickInterval: 7,
            },
            yAxis: [
                {
                    title: {
                        text: 'Points'
                    }
                }
            ],
            plotOptions: {
                series: {
                    marker: { enabled: false },
                    stacking: 'normal'
                },
                line: {
                    connectNulls: true,
                    stacking: 'null'
                }
            }
        };
        
    },
    _translatePreliminaryEstimate: function(pe_object_id){
        return 10;
    },
    _getAssociatedPortfolioItems: function(tags, pids){
        this.logger.log('_getAssociatedPortfolioItems', tags, pids);
        var deferred = Ext.create('Deft.Deferred');
        var portfolio_item_ids = [];
        var top_level_pis = [];
        var find_obj = {
                _TypeHierarchy: {$in: this.portfolioItemTypes},
                __At: "current" 
            };
        if (tags.length > 0) {
            find_obj.Tags = {$in: tags};
        }
        if (pids.length > 0) {
            find_obj.ObjectID = {$in: pids};
        }
        
        Ext.create('Rally.data.lookback.SnapshotStore', {
            listeners: {
                scope: this,
                load: function(store, data, success) {
                    if (success) {
                        //Now parse through the data to get the portfolio item object ids that we want
                        var total = 0;
                        var startDate = new Date('1/1/2999');
                        var endDate = new Date('1/1/1970'); 
                        Ext.each(data, function(d){
                            portfolio_item_ids.push(d.get('ObjectID'));
                            if (d.get('State') == this.portfolioItemStateDone){
                                total += Number(d.get('LeafStoryPlanEstimateTotal'));
                            } else {
                                var pe = this._translatePreliminaryEstimate(d.get('PreliminaryEstimate'));
                                var se = Number(d.get('LeafStoryPlanEstimateTotal'));
                                total += Math.max(se,pe);
                            }
                            var sd = new Date(d.get('PlannedStartDate'));
                            var ed = new Date(d.get('PlannedEndDate'));
                            
                            console.log(d.get('FormattedID'),sd, ed);
                            if (sd != 'Invalid Date' && sd < startDate){
                                    startDate = sd;
                            }
                            if (ed != 'Invalid Date' && ed > endDate){
                                    endDate = ed;
                            }
                        },this);
                        deferred.resolve([portfolio_item_ids, total, startDate, endDate]);
                    } else {
                        deferred.reject('Error getting associated Portfolio Items', success);
                    }
                }
            },
            autoLoad: true,
            fetch: ['ObjectID', 'FormattedID','Name','_ItemHierarchy','_TypeHierarchy','LeafStoryPlanEstimateTotal','PreliminaryEstimate','PlannedStartDate','PlannedEndDate','State'],
            hydrate: ['State','PreliminaryEstimate'],
            find: find_obj
        });
        return deferred; 
    },

    _getTagObjectIDs: function(){
        var tag_objects = this.down('#tag-picker').getValue(); 
        var tags = [];
        Ext.each(tag_objects, function(to){
            tags.push(to.get('ObjectID'));
        },this);
        return tags; 
    },
    _getStoreConfig: function(portfolioItemObjectIds){
        this.logger.log('_getStoreConfig', portfolioItemObjectIds);
        return {
            find: {
                _TypeHierarchy: 'HierarchicalRequirement',
                Children: null,
                _ProjectHierarchy: this.getContext().getProject().ObjectID,
                _ItemHierarchy: {$in: portfolioItemObjectIds}
             },
            fetch: ['ScheduleState','PlanEstimate','_TypeHierarchy','_ValidTo','_ValidFrom'],
            hydrate: ['ScheduleState','_TypeHierarchy'],
            compress: true,
            sort: {
                _ValidFrom: 1
            },
            context: this.getContext().getDataContext(),
            limit: Infinity
        };
    }
});
            
               Rally.launchApp('CustomApp', {
                   name: 'Cumulative Flow by Tags'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>